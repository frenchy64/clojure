From e9cdb2e7c0fda6f80c730436230393f0c0da10d6 Mon Sep 17 00:00:00 2001
From: Ambrose Bonnaire-Sergeant <abonnairesergeant@gmail.com>
Date: Thu, 2 Apr 2015 04:18:56 +0000
Subject: [PATCH] fix CLJ-1692

---
 src/jvm/clojure/lang/Iterate.java       | 20 +++++++++++++++++---
 test/clojure/test_clojure/sequences.clj | 16 ++--------------
 2 files changed, 19 insertions(+), 17 deletions(-)

diff --git a/src/jvm/clojure/lang/Iterate.java b/src/jvm/clojure/lang/Iterate.java
index 9100caa..9dabc36 100644
--- a/src/jvm/clojure/lang/Iterate.java
+++ b/src/jvm/clojure/lang/Iterate.java
@@ -14,19 +14,30 @@ package clojure.lang;
 
 public class Iterate extends ASeq implements IReduce {
 
+private static final Object UNREALIZED_NSEED = new Object();
 private final IFn f;      // never null
 private final Object seed;
+private volatile Object _nseed;  // cached
 private volatile ISeq _next;  // cached
 
 private Iterate(IFn f, Object seed){
     this.f = f;
     this.seed = seed;
+    this._nseed = seed;
 }
 
 private Iterate(IPersistentMap meta, IFn f, Object seed){
     super(meta);
     this.f = f;
     this.seed = seed;
+    this._nseed = seed;
+}
+
+private Iterate(IPersistentMap meta, IFn f, Object seed, Object _nseed){
+    super(meta);
+    this.f = f;
+    this.seed = seed;
+    this._nseed = _nseed;
 }
 
 public static ISeq create(IFn f, Object seed){
@@ -34,18 +45,21 @@ public static ISeq create(IFn f, Object seed){
 }
 
 public Object first(){
-    return seed;
+    if(_nseed == UNREALIZED_NSEED) {
+      _nseed = f.invoke(seed);
+    }
+    return _nseed;
 }
 
 public ISeq next(){
     if(_next == null) {
-        _next = new Iterate(f, f.invoke(seed));
+        _next = new Iterate(null, f, _nseed, UNREALIZED_NSEED);
     }
     return _next;
 }
 
 public Iterate withMeta(IPersistentMap meta){
-    return new Iterate(meta, f, seed);
+    return new Iterate(meta, f, seed, _nseed);
 }
 
 public Object reduce(IFn rf){
diff --git a/test/clojure/test_clojure/sequences.clj b/test/clojure/test_clojure/sequences.clj
index 490684d..ef93708 100644
--- a/test/clojure/test_clojure/sequences.clj
+++ b/test/clojure/test_clojure/sequences.clj
@@ -789,6 +789,7 @@
       (is (= '(:foo 42 :foo 42) (take 4 (iterate #(if (= % :foo) 42 :foo) :foo))))
       (is (= '(1 false true true) (take 4 (iterate #(instance? Boolean %) 1))))
       (is (= '(256 128 64 32 16 8 4 2 1 0) (take 10 (iterate #(quot % 2) 256))))
+      (is (= '(0 true) (take 2 (iterate zero? 0))))
 
       ;; reduce via transduce
       (is (= (transduce (take 5) + (iterate #(* 2 %) 2)) 62))
@@ -967,19 +968,6 @@
       #{} #{1 2} ))
 
 
-(deftest test-iterate
-      (are [x y] (= x y)
-           (take 0 (iterate inc 0)) ()
-           (take 1 (iterate inc 0)) '(0)
-           (take 2 (iterate inc 0)) '(0 1)
-           (take 5 (iterate inc 0)) '(0 1 2 3 4) )
-
-      ; test other fns
-      (is (= '(:foo 42 :foo 42) (take 4 (iterate #(if (= % :foo) 42 :foo) :foo))))
-      (is (= '(1 false true true) (take 4 (iterate #(instance? Boolean %) 1))))
-      (is (= '(256 128 64 32 16 8 4 2 1 0) (take 10 (iterate #(quot % 2) 256)))))
-
-
 (deftest test-range
   (are [x y] (= x y)
       (range 0) ()   ; exclusive end!
@@ -1270,4 +1258,4 @@
     (is (= s1 (seq s2)))
     (doseq [i (range 100)]
       (is (= s1 (concat (subseq s2 < i) (subseq s2 >= i))))
-      (is (= (reverse s1) (concat (rsubseq s2 >= i) (rsubseq s2 < i)))))))
\ No newline at end of file
+      (is (= (reverse s1) (concat (rsubseq s2 >= i) (rsubseq s2 < i)))))))
-- 
1.9.1

